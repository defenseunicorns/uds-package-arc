name: example-linux
on: workflow_dispatch

# Abort prior jobs in the same workflow / PR
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  create-zarf-package:
    runs-on: [self-hosted,linux]
    steps:
      # Not needed for this example, but still included for reference
      - name: Checkout
        uses: actions/checkout@v3
      # Setup Zarf
      - name: Setup Zarf
        uses: defenseunicorns/setup-zarf@main # https://github.com/defenseunicorns/setup-zarf
        with:
          version: v0.22.1 # Optional, defaults to https://github.com/defenseunicorns/zarf/releases/latest
          download-init-package: true # Required, defaults to false
      # Cloning example packages from main Zarf repo
      - name: Clone Examples
        run: |
          git clone --filter=blob:none --no-checkout https://github.com/defenseunicorns/zarf.git
          cd zarf
          git sparse-checkout set examples
          git checkout main
          cd ..
          mv zarf/examples .
          rm -rf zarf
          echo "Zarf examples cloned to $(pwd)/examples"
          find examples -maxdepth 1 -type f -delete
          ls -la examples
          mkdir -p packages
      # Create Zarf package(s)
      - name: Build Example Packages
        run: |
          for example in examples/*; do

            # Certain examples require additional flags to build
            if [[ $example == *"config-file"* ]]; then
              flags="--set ZEBRA=stripes --set LEOPARD=spots"
            elif [[ $example == *"package-variables"* ]]; then
              flags="--set ACTION=template --set CONFIG_MAP=simple-configmap.yaml"
            else
              flags=""
            fi

            echo "::group::Building Zarf package for $example"

            # To see usage of the `zarf packages create` command, run `zarf packages create --help`
            echo "::notice::zarf package create $example --output-directory packages --confirm $flags"
            
            zarf package create "$example" --output-directory packages --confirm $flags

            echo "::endgroup::"

          done
          echo "Zarf packages created in $(pwd)/packages"
          ls -lh packages
      # Setup K3d for local k8s testing
      - name: Setup K3d
        run: "curl -s https://raw.githubusercontent.com/k3d-io/k3d/main/install.sh | bash"
      - name: Create K3d Cluster
        run: k3d cluster delete && k3d cluster create
      # Init Zarf into the cluster
      # We are also deploying the internal git-server component to the cluster (used in the flux example)
      - name: Init Zarf
        run: zarf init --components=git-server --confirm
      # Deploy Zarf package(s)
      - name: Deploy Example Packages
        run: |
          for package in packages/*; do

            # Skip certain examples either because they are not supported on Linux or because I didnt feel like writing the extra logic to make them work
            if [[ $package == *"minio"*  ]] || [[ $package == *"terraform"* ]]; then
              continue
            fi

            echo "::group::Deploying Zarf package $package"

            # To see usage of the `zarf package deploy` command, run `zarf package deploy --help`
            echo "::notice::zarf package deploy $package --confirm"
            
            zarf package deploy "$package" --confirm

            echo "::endgroup::"

            # Certain examples do not deploy resources to k8s, so we skip the remove step
            if [[ $package == *"component-choice"* ]]; then
                rm second-choice-file.txt
                continue
            elif [[ $package == *"component-scripts"* ]]; then
                continue
            elif [[ $package == *"data-injection"* ]]; then
                kubectl delete namespace demo
                continue
            fi

            echo "::group::Removing Zarf package $package"

            # To see usage of the `zarf package remove` command, run `zarf package remove --help`
            echo "::notice::zarf package remove $package --confirm"
            
            zarf package remove "$package" --confirm

            echo "::endgroup::"

          done

      - name: "Save debug logs"
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: debug-log
          path: /tmp/zarf-*.log